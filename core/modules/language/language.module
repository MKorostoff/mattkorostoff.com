<?php

/**
 * @file
 * Add language handling functionality to Drupal.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\language\Entity\ConfigurableLanguage;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUI;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrlFallback;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_help().
 */
function language_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.language':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Language module allows you to configure the languages used on your site, and provides information for the for <a href="!content">Content Translation</a>, <a href="!interface">Interface Translation</a>, and <a href="!configuration">Configuration Translation</a> modules, if they are enabled. For more information, see <a href="!doc_url">the online documentation for the Language module</a>.', array('!doc_url' => 'https://drupal.org/documentation/modules/language', '!content' => (\Drupal::moduleHandler()->moduleExists('content_translation')) ? \Drupal::url('help.page', array('name' => 'content_translation')) : '#', '!interface' => (\Drupal::moduleHandler()->moduleExists('locale')) ? \Drupal::url('help.page', array('name' => 'locale')) : '#', '!configuration' => (\Drupal::moduleHandler()->moduleExists('config_translation')) ? \Drupal::url('help.page', array('name' => 'config_translation')) : '#')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Adding languages') . '</dt>';
      $output .= '<dd>' . t('You can add languages on the <a href="!language_list">Languages</a> page by selecting <em>Add language</em> and choosing a language from the drop-down menu. This language is then displayed in the languages list, where it can be configured further. If the <a href="!interface">Interface translation module</a> is enabled, and the <em>translation server</em> is set as a translation source, then the interface translation for this language is automatically downloaded as well.' , array('!language_list' => \Drupal::url('language.admin_overview'), '!interface' => (\Drupal::moduleHandler()->moduleExists('locale')) ? \Drupal::url('help.page', array('name' => 'locale')) : '#')) . '</dd>';
      $output .= '<dt>' . t('Adding custom languages') . '</dt>';
      $output .= '<dd>' . t('You can add a language that is not provided in the drop-down list by choosing <em>Custom language</em> at the end of the list. You then have to configure its language code, name, and direction in the form provided.') . '</dd>';
      $output .= '<dt>' . t('Configuring content languages') . '</dt>';
      $output .= '<dd>' . t('By default, content is created in the site\'s default language and no language selector is displayed on content creation pages. On the <a href="!content_language">Content language</a> page you can customize the language configuration for any supported content entity on your site (for example for content types or menu links). After choosing an entity, you are provided with a drop-down menu to set the default language and a check-box to display language selectors.', array('!content_language' => \Drupal::url('language.content_settings_page'))) . '</dd>';
      $output .= '<dt>' . t('Adding a language switcher block') . '</dt>';
      $output .= '<dd>' . t('If the Block module is enabled, then you can add a language switcher block on the <a href="!blocks">Block layout</a> page to allow users to switch between languages.', array('!blocks' => (\Drupal::moduleHandler()->moduleExists('block')) ? \Drupal::url('block.admin_display') : '#')) . '</dd>';
      $output .= '<dt>' . t('Making a block visible per language') . '</dt>';
      $output .= '<dd>' . t('If the Block module is enabled, then the Language module allows you to set the visibility of a block based on selected languages on the <a href="!blocks">Block layout</a> page.', array('!blocks' => (\Drupal::moduleHandler()->moduleExists('block')) ? \Drupal::url('block.admin_display') : '#')) . '</dd>';
      $output .= '<dt>' . t('Choosing user languages') . '</dt>';
      $output .= '<dd>' . t('Users can choose a <em>Site language</em> on their profile page. This language is used for email messages, and can be used by modules to determine a user\'s language. It can also be used for interface text, if the <em>User</em> method is enabled as a <em>Detection and selection</em> method (see below). Administrative users can choose a separate <em>Administration pages language</em> for the interface text on administration pages. This configuration is only available on the user\'s profile page if the <em>Account administration pages</em> method is enabled (see below).') . '</dd>';
      $output .= '<dt>' . t('Language detection and selection') . '</dt>';
      $output .= '<dd>' . t('The <a href="!detection">Detection and selection</a> page provides several methods for deciding which language is used for displaying interface text. When a method detects and selects an interface language, then the following methods in the list are not applied. You can order them by importance, with your preferred method at the top of the list, followed by one or several fall-back methods.', array('!detection' => \Drupal::url('language.negotiation')));
      $output .= '<ul><li>' . t('<em>URL</em> sets the interface language based on a path prefix or domain (for example specifying <em>de</em> for German would result in URLs like <em>example.com/de/contact</em>). The default language does not require a path prefix, but can have one assigned as well. If the language detection is done by domain name, a domain needs to be specified for each language.') . '</li>';
      $output .= '<li>' . t('<em>Session</em> determines the interface language from a request or session parameter (for example <em>example.com?language=de</em> would set the interface language to German based on the use of <em>de</em> as the <em>language</em> parameter).') . '</li>';
      $output .= '<li>' . t('<em>User</em> follows the language configuration set on the user\'s profile page.') . '</li>';
      $output .= '<li>' . t('<em>Browser</em> sets the interface language based on the browser\'s language settings. Since browsers use different language codes to refer to the same languages, you can add and edit languages codes to map the browser language codes to the <a href="!language_list">language codes</a> used on your site.',  array('!language_list' => \Drupal::url('language.admin_overview'))) . '</li>';
      $output .= '<li>' . t('<em>Account administration pages</em> follows the configuration set as <em>Administration pages language</em> on the profile page of an administrative user. This method is similar to the <em>User</em> method, but only sets the interface text language on administration pages, independent of the interface text language on other pages.') . '</li>';
      $output .= '<li>' . t('<em>Selected language</em> allows you to specify the site\'s default language or a specific language as the fall-back language. This method should be listed last.') . '</li></ul></dd>';
      $output .= '</dl>';
      return $output;

    case 'language.admin_overview':
      return '<p>' . t('Reorder the added languages to set their order in the language switcher block and, when editing content, in the list of selectable languages. This ordering does not impact <a href="@detection">detection and selection</a>.', array('@detection' => \Drupal::url('language.negotiation'))) . '</p>';

    case 'language.add':
      return '<p>' . t('Add a language to be supported by your site. If your desired language is not available, pick <em>Custom language...</em> at the end and provide a language code and other details manually.') . '</p>';

    case 'language.negotiation':
      $output = '<p>' . t('Define how to decide which language is used to display page elements (primarily text provided by modules, such as field labels and help text). This decision is made by evaluating a series of detection methods for languages; the first detection method that gets a result will determine which language is used for that type of text. Be aware that some language negotiation methods are unreliable under certain conditions, such as browser detection when page-caching is enabled and a user is not currently logged in. Define the order of evaluation of language detection methods on this page. The default language can be changed at the <a href="!region-settings">Regional settings</a> page.', array('!region-settings' => \Drupal::url('system.regional_settings'))) . '</p>';
      return $output;

    case 'language.negotiation_session':
      $output = '<p>' . t('Determine the language from a request/session parameter. Example: "http://example.com?language=de" sets language to German based on the use of "de" within the "language" parameter.') . '</p>';
      return $output;

    case 'language.negotiation_browser':
      $output = '<p>' . t('Browsers use different language codes to refer to the same languages. You can add and edit mappings from browser language codes to the <a href="!configure-languages">languages used</a>.', array('!configure-languages' => \Drupal::url('language.admin_overview'))) . '</p>';
      return $output;

    case 'language.negotiation_selected':
      $output = '<p>' . t('Changing the selected language here (and leaving this option as the last among the detection and selection options) is the easiest way to change the fallback language for the website, if you need to change how your site works by default (e.g., when using an empty path prefix or using the default domain). <a href="!admin-change-language">Changing the site\'s default language</a> itself might have other undesired side effects.', array('!admin-change-language' => \Drupal::url('language.admin_overview'))) . '</p>';
      return $output;

    case 'entity.block.edit_form':
      if (($block = $route_match->getParameter('block')) && $block->get('plugin') == 'language_block:language_interface') {
        return '<p>' . t('With multiple languages added, registered users can select their preferred language and authors can assign a specific language to content.') . '</p>';
      }
      break;

    case 'block.admin_add':
      if ($route_match->getParameter('plugin_id') == 'language_block:language_interface') {
        return '<p>' . t('With multiple languages added, registered users can select their preferred language and authors can assign a specific language to content.') . '</p>';
      }
      break;

    case 'language.content_settings_page':
      return t('Change language settings for <em>content types</em>, <em>taxonomy vocabularies</em>, <em>user profiles</em>, or any other supported element on your site. By default, language settings hide the language selector and the language is the site\'s default language.');
  }
}

/**
 * Implements hook_theme().
 */
function language_theme() {
  return array(
    'language_negotiation_configure_form' => array(
      'render element' => 'form',
      'file' => 'language.admin.inc',
      'template' => 'language-negotiation-configure-form',
    ),
    'language_negotiation_configure_browser_form_table' => array(
      'render element' => 'form',
      'file' => 'language.admin.inc',
    ),
    'language_content_settings_table' => array(
      'render element' => 'element',
      'file' => 'language.admin.inc',
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function language_element_info_alter(&$type) {
  // Alter the language_select element so that it will be rendered like a select
  // field.
  if (isset($type['language_select'])) {
    if (!isset($type['language_select']['#process'])) {
      $type['language_select']['#process'] = array();
    }
    if (!isset($type['language_select']['#theme_wrappers'])) {
      $type['language_select']['#theme_wrappers'] = array();
    }
    $type['language_select']['#process'] = array_merge($type['language_select']['#process'], array(
      'language_process_language_select',
      array('Drupal\Core\Render\Element\Select', 'processSelect'),
      array('Drupal\Core\Render\Element\RenderElement', 'processAjaxForm'),
    ));
    $type['language_select']['#theme'] = 'select';
    $type['language_select']['#theme_wrappers'] = array_merge($type['language_select']['#theme_wrappers'], array('form_element'));
    $type['language_select']['#languages'] = LanguageInterface::STATE_CONFIGURABLE;
    $type['language_select']['#multiple'] = FALSE;
  }
}

/**
 * Processes a language select list form element.
 *
 * @param array $element
 *   The form element to process.
 *
 * @return array $element
 *   The processed form element.
 */
function language_process_language_select($element) {
  // Don't set the options if another module (translation for example) already
  // set the options.
  if (!isset($element['#options'])) {
    $element['#options'] = array();
    foreach (\Drupal::languageManager()->getLanguages($element['#languages']) as $langcode => $language) {
      $element['#options'][$langcode] = $language->isLocked() ? t('- @name -', array('@name' => $language->name)) : $language->name;
    }
  }
  // Add "Built-in English" language to the select when the default value is
  // set to English but it does not exist in the options list.
  //
  // Drupal core includes configuration shipped in English, including default
  // views, content types, user roles, filter formats, etc. To keep the Drupal
  // software update-able, as well as translations update-able, we keep these
  // configuration files in English even when installed in a foreign language.
  // However, administrators can remove English, in which case editing such a
  // configuration would lead to the language settings being changed on it. We
  // avoid that by including this option and letting administrators keep it
  // in English.
  if (isset($element['#default_value']) && $element['#default_value'] == 'en' && !isset($element['#options']['en'])) {
    // Prepend the default language at the beginning of the list.
    $element['#options'] = array('en' => t('Built-in English')) + $element['#options'];
  }
  return $element;
}

/**
 * Implements hook_element_info().
 *
 * @todo Remove once https://www.drupal.org/node/2326409 is in.
 */
function language_element_info() {
  $types['language_configuration'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#process' => array(
      '\Drupal\language\Element\LanguageConfiguration::processLanguageConfiguration',
    ),
  );
  return $types;
}

/**
 * Submit handler for the forms that have a language_configuration element.
 */
function language_configuration_element_submit(&$form, FormStateInterface $form_state) {
  // Iterate through all the language_configuration elements and save their
  // values.
  if ($language = $form_state->get('language')) {
    foreach ($language as $element_name => $values) {
      language_save_default_configuration($values['entity_type'], $values['bundle'],  $form_state->getValue($element_name));
    }
  }
}

/**
 * Saves a language configuration that is attached to an entity type and bundle.
 *
 * @param string $entity_type
 *   A string representing the entity type.
 * @param string $bundle
 *   A string representing the bundle.
 * @param array $values
 *   An array holding the values to be saved having the following keys:
 *   - langcode: the language code.
 *   - language_show: if the language element should be hidden or not.
 */
function language_save_default_configuration($entity_type, $bundle, $values = array()) {
  \Drupal::config('language.settings')->set(language_get_default_configuration_settings_key($entity_type, $bundle), array('langcode' => $values['langcode'], 'language_show' => $values['language_show']))->save();
}

/**
 * Returns the language configuration stored for an entity type and bundle.
 *
 * @param string $entity_type
 *   A string representing the entity type.
 * @param string $bundle
 *   A string representing the bundle.
 *
 * @return array
 *   An array with the following keys:
 *   - langcode: the language code.
 *   - language_show: if the language element is hidden or not.
 */
function language_get_default_configuration($entity_type, $bundle) {
  $configuration = \Drupal::config('language.settings')->get(language_get_default_configuration_settings_key($entity_type, $bundle));
  if (is_null($configuration)) {
    $configuration = array();
  }
  $configuration += array('langcode' => 'site_default', 'language_show' => FALSE);
  return $configuration;
}

/**
 * Clears the default language configuration for an entity type and bundle.
 *
 * @param string $entity_type
 *   A string representing the entity type.
 * @param string $bundle
 *   A string representing the bundle.
 */
function language_clear_default_configuration($entity_type, $bundle) {
  \Drupal::config('language.settings')->clear(language_get_default_configuration_settings_key($entity_type, $bundle))->save();
}

/**
 * Returns the root name of the variables used to store the configuration.
 *
 * Based on the entity type and bundle, the variables used to store the
 * configuration will have a common root name.
 *
 * @param string $entity_type
 *   A string representing the entity type.
 * @param string $bundle
 *   A string representing the bundle.
 *
 * @return string
 *   The root name of the variables.
 */
function language_get_default_configuration_settings_key($entity_type, $bundle) {
  // Replace all the characters that are not letters, numbers or "_" with "_".
  $entity_type = preg_replace('/[^0-9a-zA-Z_]/', "_", $entity_type);
  $bundle = preg_replace('/[^0-9a-zA-Z_]/', "_", $bundle);
  return 'entities.' . $entity_type . '.' . $bundle . '.language.default_configuration';
}

/**
 * Implements hook_ENTITY_TYPE_update() for node_type entities.
 */
function language_node_type_update(NodeTypeInterface $type) {
  if ($type->original->id() != $type->id()) {
    language_save_default_configuration('node', $type->id(), language_get_default_configuration('node', $type->original->id()));
    language_clear_default_configuration('node', $type->original->id());
  }
}

/**
 * Returns the default language code assigned to an entity type and a bundle.
 *
 * @param string $entity_type
 *   The entity type.
 * @param string $bundle
 *   The bundle name.
 *
 * @return string
 *   The language code.
 */
function language_get_default_langcode($entity_type, $bundle) {
  $configuration = language_get_default_configuration($entity_type, $bundle);

  if (!isset($configuration['langcode'])) {
    $configuration['langcode'] = 'site_default';
  }

  $default_value = NULL;
  $language_interface = \Drupal::languageManager()->getCurrentLanguage();
  switch ($configuration['langcode']) {
    case 'site_default':
      $default_value = \Drupal::languageManager()->getDefaultLanguage()->id;
      break;

    case 'current_interface':
      $default_value = $language_interface->id;
      break;

    case 'authors_default':
      $user = \Drupal::currentUser();
      $language_code = $user->getPreferredLangcode();
      if (!empty($language_code)) {
        $default_value = $language_code;
      }
      else {
        $default_value = $language_interface->id;
      }
      break;
  }
  if ($default_value) {
    return $default_value;
  }

  // If we still do not have a default value, just return the value stored in
  // the configuration; it has to be an actual language code.
  return $configuration['langcode'];
}

/**
 * Implements hook_language_types_info().
 *
 * Defines the three core language types:
 * - Interface language is the only configurable language type in core. It is
 *   used by t() as the default language if none is specified.
 * - Content language is by default non-configurable and inherits the interface
 *   language negotiated value. It is used by the Field API to determine the
 *   display language for fields if no explicit value is specified.
 * - URL language is by default non-configurable and is determined through the
 *   URL language negotiation method or the URL fallback language negotiation
 *   method if no language can be detected. It is used by l() as the default
 *   language if none is specified.
 */
function language_language_types_info() {
  return array(
    LanguageInterface::TYPE_INTERFACE => array(
      'name' => t('User interface text'),
      'description' => t('Order of language detection methods for user interface text. If a translation of user interface text is available in the detected language, it will be displayed.'),
      'locked' => TRUE,
    ),
    LanguageInterface::TYPE_CONTENT => array(
      'name' => t('Content'),
      'description' => t('Order of language detection methods for content. If a version of content is available in the detected language, it will be displayed.'),
      'fixed' => array(LanguageNegotiationUI::METHOD_ID),
      'locked' => TRUE,
    ),
    LanguageInterface::TYPE_URL => array(
      'fixed' => array(LanguageNegotiationUrl::METHOD_ID, LanguageNegotiationUrlFallback::METHOD_ID),
      'locked' => TRUE,
    ),
  );
}

/**
 * Reads language prefixes and uses the langcode if no prefix is set.
 */
function language_negotiation_url_prefixes() {
  return \Drupal::config('language.negotiation')->get('url.prefixes');
}

/**
 * Update the list of prefixes from the installed languages.
 */
function language_negotiation_url_prefixes_update() {
  $prefixes = language_negotiation_url_prefixes();
  foreach (\Drupal::languageManager()->getLanguages() as $language) {
    // The prefix for this language should be updated if it's not assigned yet
    // or the prefix is set to the empty string.
    if (empty($prefixes[$language->getId()])) {
      // For the default language, set the prefix to the empty string,
      // otherwise use the langcode.
      $prefixes[$language->getId()] = $language->isDefault() ? '' : $language->id;
    }
    // Otherwise we keep the configured prefix.
  }
  language_negotiation_url_prefixes_save($prefixes);
}

/**
 * Saves language prefix settings.
 */
function language_negotiation_url_prefixes_save(array $prefixes) {
  \Drupal::config('language.negotiation')
  ->set('url.prefixes', $prefixes)
  ->save();
}

/**
 * Reads language domains.
 */
function language_negotiation_url_domains() {
  return \Drupal::config('language.negotiation')->get('url.domains');
}

/**
 * Saves the language domain settings.
 */
function language_negotiation_url_domains_save(array $domains) {
  \Drupal::config('language.negotiation')
  ->set('url.domains', $domains)
  ->save();
}

/**
 * Implements hook_modules_installed().
 */
function language_modules_installed($modules) {
  if (!in_array('language', $modules)) {
    $negotiator = \Drupal::service('language_negotiator');
    $negotiator->updateConfiguration(array());
    $negotiator->purgeConfiguration();
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function language_modules_uninstalled($modules) {
  language_modules_installed($modules);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for 'configurable_language'.
 */
function language_configurable_language_insert(ConfigurableLanguage $language) {
  if ($language->isLocked()) {
    return;
  }

  // Add language to the list of language domains.
  $domains = language_negotiation_url_domains();
  $domains[$language->id()] = '';
  language_negotiation_url_domains_save($domains);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for 'configurable_language'.
 */
function language_configurable_language_delete(ConfigurableLanguage $language) {
  // Remove language from language prefix list.
  $prefixes = language_negotiation_url_prefixes();
  unset($prefixes[$language->id()]);
  language_negotiation_url_prefixes_save($prefixes);

  // Remove language from language domain list.
  $domains = language_negotiation_url_domains();
  unset($domains[$language->id()]);
  language_negotiation_url_domains_save($domains);
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function language_preprocess_block(&$variables) {
  if ($variables['configuration']['provider'] == 'language') {
    $variables['attributes']['role'] = 'navigation';
  }
}

/**
 * Returns language mappings between browser and Drupal language codes.
 *
 * @return array
 *   An array containing browser language codes as keys with corresponding
 *   Drupal language codes as values.
 */
function language_get_browser_drupal_langcode_mappings() {
  $config = \Drupal::config('language.mappings');
  if ($config->isNew()) {
    return array();
  }
  return $config->get();
}

/**
 * Stores language mappings between browser and Drupal language codes.
 *
 * @param array $mappings
 *   An array containing browser language codes as keys with corresponding
 *   Drupal language codes as values.
 */
function language_set_browser_drupal_langcode_mappings($mappings) {
  $config = \Drupal::config('language.mappings');
  $config->setData($mappings);
  $config->save();
}

/**
 * Implements hook_form_FORM_ID_alter for system_regional_settings().
 *
 * @see language_system_regional_settings_form_submit()
 */
function language_form_system_regional_settings_alter(&$form, FormStateInterface $form_state) {
  $languages = \Drupal::languageManager()->getLanguages();
  $default = \Drupal::languageManager()->getDefaultLanguage();
  foreach ($languages as $key => $language) {
    $language_options[$key] = $language->name;
  }
  $form['locale']['site_default_language'] = array(
    '#type' => 'select',
    '#title' => t('Default language'),
    '#default_value' => $default->id,
    '#options' => $language_options,
    '#description' => t('It is not recommended to change the default language on a working site. <a href="@language-detection">Configure the Selected language</a> setting on the detection and selection page to change the fallback language for language selection.', array('@language-detection' => \Drupal::url('language.negotiation'))),
    '#weight' => -1,
  );
  // Add submit handler to save default language.
  $form['#submit'][] = 'language_system_regional_settings_form_submit';
}

/**
 * Form submission handler for system_regional_settings().
 *
 * @see language_form_system_regional_settings_alter()
 */
function language_system_regional_settings_form_submit($form, FormStateInterface $form_state) {
  \Drupal::config('system.site')->set('langcode', $form_state->getValue('site_default_language'))->save();
}

/**
 * Implements hook_field_info_alter().
 */
function language_field_info_alter(&$info) {
  // Change the default behavior of language field.
  $info['language']['class'] = '\Drupal\language\DefaultLanguageItem';
}
