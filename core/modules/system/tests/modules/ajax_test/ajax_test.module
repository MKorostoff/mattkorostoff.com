<?php

/**
 * @file
 * Helper module for Ajax framework tests.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\AlertCommand;
use Drupal\Core\Ajax\OpenDialogCommand;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Ajax\CloseDialogCommand;
use Drupal\Core\Ajax\HtmlCommand;

/**
 * Menu callback: Returns an element suitable for use by
 * \Drupal\Core\Ajax\AjaxResponse::ajaxRender().
 *
 * Additionally ensures that \Drupal\Core\Ajax\AjaxResponse::ajaxRender()
 * incorporates JavaScript settings generated during the page request by
 * invoking _drupal_add_js() with a dummy setting.
 *
 * @deprecated \Drupal\ajax_test\Controller\AjaxTestController::render()
 */
function ajax_test_render() {
  $attached = array(
    '#attached' => array(
      'js' => array(
        0 => array(
          'type' => 'setting',
          'data' => array('ajax' => 'test'),
        ),
      ),
    ),
  );
  // @todo Why is this being tested via an explicit drupal_render() call?
  drupal_render($attached);
  drupal_process_attached($attached);
  $response = new AjaxResponse();
  return $response;
}

/**
 * Menu callback: Returns an AjaxResponse; settings command set last.
 *
 * Helps verifying AjaxResponse reorders commands to ensure correct execution.
 *
 * @deprecated \Drupal\ajax_test\Controller\AjaxTestController::order()
 */
function ajax_test_order() {
  $response = new AjaxResponse();
  $path = drupal_get_path('module', 'system');
  // HTML insertion command.
  $response->addCommand(new HtmlCommand('body', 'Hello, world!'));
  $attached = array(
    '#attached' => array(
      'css' => array(
        // Add two CSS files (order should remain the same).
        $path . '/css/system.admin.css' => array(),
        $path . '/css/system.maintenance.css' => array(),
      ),
      'js' => array(
        // Add two JavaScript files (first to the footer, should appear last).
        $path . '/system.modules.js' => array('scope' => 'footer'),
        $path . '/system.js' => array(),
        // Finally, add a JavaScript setting.
        0 => array(
          'type' => 'setting',
          'data' => array('ajax' => 'test'),
        ),
      ),
    ),
  );

  // @todo Why is this being tested via an explicit drupal_render() call?
  drupal_render($attached);
  drupal_process_attached($attached);

  return $response;
}

/**
 * Menu callback: Returns AJAX element with #error property set.
 *
 * @deprecated \Drupal\ajax_test\Controller\AjaxTestController::renderError()
 */
function ajax_test_error() {
  $message = '';
  $query = \Drupal::request()->query;
  if ($query->has('message')) {
    $message = $query->get('message');
  }
  $response = new AjaxResponse();
  $response->addCommand(new AlertCommand($message));
  return $response;
}

/**
 * Returns example content for dialog tests.
 */
function ajax_test_dialog_contents() {
  // This is a regular render array; the keys do not have special meaning.
  $content = array(
    '#title' => 'AJAX Dialog contents',
    'content' => array(
      '#markup' => 'Example message',
    ),
    'cancel' => array(
      '#type' => 'link',
      '#title' => 'Cancel',
      '#href' => '',
      '#attributes' => array(
        // This is a special class to which JavaScript assigns dialog closing
        // behavior.
        'class' => array('dialog-cancel'),
      ),
    ),
  );

  return $content;
}

/**
 * Menu callback: Close the ajax dialog.
 *
 * @deprecated \Drupal\ajax_test\Controller\AjaxTestController::dialogClose()
 */
function ajax_test_dialog_close() {
  $response = new AjaxResponse();
  $response->addCommand(new CloseDialogCommand('#ajax-test-dialog-wrapper-1'));
  return $response;
}
