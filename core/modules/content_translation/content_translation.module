<?php

/**
 * @file
 * Allows entities to be translated into different languages.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function content_translation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.content_translation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Content Translation module allows you to translate content, comments, custom blocks, taxonomy terms, users and other <a href="!entity_help">content entities</a>. Together with the modules <a href="!language">Language</a>, <a href="!config-trans">Configuration Translation</a>, and <a href="!locale">Interface Translation</a>, it allows you to build multilingual websites. For more information, see <a href="!translation-entity">the online documentation for the Content Translation module</a>.', array('!locale' => (\Drupal::moduleHandler()->moduleExists('locale')) ? \Drupal::url('help.page', array('name' => 'locale')) : '#', '!config-trans' => (\Drupal::moduleHandler()->moduleExists('config_translation')) ? \Drupal::url('help.page', array('name' => 'config_translation')) : '#', '!language' => \Drupal::url('help.page', array('name' => 'language')), '!translation-entity' => 'https://drupal.org/documentation/modules/translation', '!entity_help' => \Drupal::url('help.page', array('name' => 'entity')))) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Enabling translation') . '</dt>';
      $output .= '<dd>' . t('In order to translate content, the website must have at least two <a href="!url">languages</a>. When that is the case, you can enable translation for the desired content entities on the <a href="!translation-entity">Content language</a> page. When enabling translation you can choose the default language for content and decide whether to show the language selection field on the content editing forms.', array('!url' => \Drupal::url('language.admin_overview'), '!translation-entity' => \Drupal::url('language.content_settings_page'), '!language-help' => \Drupal::url('help.page', array('name' => 'language')))) . '</dd>';
      $output .= '<dt>' . t('Enabling field translation') . '</dt>';
      $output .= '<dd>' . t('You can define which fields of a content entity can be translated. For example, you might want to translate the title and body field while leaving the image field untranslated. If you exclude a field from being translated, it will still show up in the content editing form, but any changes made to that field will be applied to <em>all</em> translations of that content.') . '</dd>';
      $output .= '<dt>' . t('Translating content') . '</dt>';
      $output .= '<dd>' . t('If translation is enabled you can translate a content entity via the Translate tab (or Translate link). The Translations page of a content entity gives an overview of the translation status for the current content and lets you add, edit, and delete its translations. This process is similar for every translatable content entity on your site.') . '</dd>';
      $output .= '<dt>' . t('Changing the source language for a translation') . '</dt>';
      $output .= '<dd>' . t('When you add a new translation, the original text you are translating is displayed in the edit form as the <em>source</em>. If at least one translation of the original content already exists when you add a new translation, you can choose either the original content (default) or one of the other translations as the source, using the select list in the Source language section. After saving the translation, the chosen source language is then listed on the Translate tab of the content.') . '</dd>';
      $output .= '<dt>' . t('Setting status of translations') . '</dt>';
      $output .= '<dd>' . t('If you edit a translation in one language you may want to set the status of the other translations as <em>out-of-date</em>. You can set this status by selecting the <em>Flag other translations as outdated</em> checkbox in the Translation section of the content editing form. The status will be visible on the Translations page.') . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'language.content_settings_page':
      $output = '';
      if (!\Drupal::languageManager()->isMultilingual()) {
        $output .= '<br/>' . t('Before you can translate content, there must be at least two languages added on the <a href="!url">languages administration</a> page.', array('!url' => \Drupal::url('language.admin_overview')));
      }
      return $output;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function content_translation_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move some of our hook implementations to the end of the list.
    case 'entity_type_alter':
      $group = $implementations['content_translation'];
      unset($implementations['content_translation']);
      $implementations['content_translation'] = $group;
      break;
  }
}

/**
 * Implements hook_language_type_info_alter().
 */
function content_translation_language_types_info_alter(array &$language_types) {
  // Make content language negotiation configurable by removing the 'locked'
  // flag.
  $language_types[LanguageInterface::TYPE_CONTENT]['locked'] = FALSE;
  unset($language_types[LanguageInterface::TYPE_CONTENT]['fixed']);
}

/**
 * Implements hook_entity_type_alter().
 *
 * The content translation UI relies on the entity info to provide its features.
 * See the documentation of hook_entity_type_build() in the Entity API documentation
 * for more details on all the entity info keys that may be defined.
 *
 * To make Content Translation automatically support an entity type some keys
 * may need to be defined, but none of them is required unless the entity path
 * is different from the usual /ENTITY_TYPE/{ENTITY_TYPE} pattern (for instance
 * "/taxonomy/term/{taxonomy_term}"), in which case at least the 'canonical' key
 * in the 'links' entity info property must be defined.
 *
 * Every entity type needs a translation controller to be translated. This can
 * be specified through the 'translation' key in the 'handlers' entity
 * annotation property. If an entity type is translatable and no translation
 * handler is defined, \Drupal\content_translation\ContentTranslationHandler
 * will be assumed. Every translation handler must implement
 * \Drupal\content_translation\ContentTranslationHandlerInterface.
 *
 * If the entity paths match the default pattern above and there is no need for
 * an entity-specific translation handler, Content Translation will
 * provide built-in support for the entity. However enabling translation for
 * each translatable bundle will be required.
 *
 * @see \Drupal\Core\Entity\Annotation\EntityType
 */
function content_translation_entity_type_alter(array &$entity_types) {
  // Provide defaults for translation info.
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type) {
    if ($entity_type->isTranslatable()) {
      if (!$entity_type->hasHandlerClass('translation')) {
        $entity_type->setHandlerClass('translation', 'Drupal\content_translation\ContentTranslationHandler');
      }

      $translation = $entity_type->get('translation');
      if (!$translation || !isset($translation['content_translation'])) {
        $translation['content_translation'] = array();
      }

      if ($entity_type->hasLinkTemplate('canonical')) {
        // Provide default route names for the translation paths.
        if (!$entity_type->hasLinkTemplate('drupal:content-translation-overview')) {
          $entity_type->setLinkTemplate('drupal:content-translation-overview', "content_translation.translation_overview_" . $entity_type->id());
        }
        // @todo Remove this as soon as menu access checks rely on the
        //   controller. See https://drupal.org/node/2155787.
        $translation['content_translation'] += array(
          'access_callback' => 'content_translation_translate_access',
        );
      }
      $entity_type->set('translation', $translation);
    }
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function content_translation_entity_bundle_info_alter(&$bundles) {
  foreach ($bundles as $entity_type => &$info) {
    foreach ($info as $bundle => &$bundle_info) {
      $enabled = content_translation_get_config($entity_type, $bundle, 'enabled');
      $bundle_info['translatable'] = !empty($enabled);
    }
  }
}

/**
 * Implements hook_field_info_alter().
 *
 * Content translation extends the @FieldType annotation with following key:
 * - column_groups: contains information about the field type properties
 *   which columns should be synchronized across different translations and
 *   which are translatable. This is useful for instance to translate the
 *   "alt" and "title" textual elements of an image field, while keeping the
 *   same image on every translation.
 *
 *   @see Drupal\image\Plugin\Field\FieldType\imageItem.
 */
function content_translation_field_info_alter(&$info) {
  foreach ($info as $key => $settings) {
    // Supply the column_groups key if it's not there.
    if (empty($settings['column_groups'])) {
      $info[$key]['column_groups'] = array();
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function content_translation_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {
  // @todo Use an access permission.
  if ($entity instanceof NodeInterface && $entity->isTranslatable()) {
    $operations['translate'] = array(
      'title' => t('Translate'),
    ) + $entity->urlInfo('drupal:content-translation-overview')->toArray();
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function content_translation_menu_links_discovered_alter(array &$links) {
  // Clarify where translation settings are located.
  $links['language.content_settings_page']['title'] = 'Content language and translation';
  $links['language.content_settings_page']['description'] = 'Configure language and translation support for content.';
}

/**
 * Convert an entity canonical link to a router path.
 *
 * @param string $link
 *   The entity link to be converted.
 *
 * @return string
 *   The resulting router path. For instance "/node/{node}" is turned into
 *   "node/%node".
 *
 * @todo Remove this and use the actual link values when all the Content
 *   Translation code is adapted to the new routing system.
 */
function _content_translation_link_to_router_path($entity_type, $link) {
  $path = preg_replace('|{([^}]+)}|', '%$1', trim($link, '/'));
  return str_replace('%id', '%' . $entity_type, $path);
}

/**
 * Strips out menu loaders from the given path.
 *
 * @param string $path
 *   The path to process.
 *
 * @return
 *   The given path where all the menu loaders are replaced with "%".
 */
function _content_translation_menu_strip_loaders($path) {
  return preg_replace('|%[^/]+|', '%', $path);
}

/**
 * Access callback for the translation overview page.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity whose translation overview should be displayed.
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 *   The access result.
 */
function content_translation_translate_access(EntityInterface $entity) {
  $account = \Drupal::currentUser();
  $condition = $entity instanceof ContentEntityInterface && !$entity->getUntranslated()->language()->isLocked() && \Drupal::languageManager()->isMultilingual() && $entity->isTranslatable() &&
    ($account->hasPermission('create content translations') || $account->hasPermission('update content translations') || $account->hasPermission('delete content translations'));
  return AccessResult::allowedIf($condition)->cachePerRole()->cacheUntilEntityChanges($entity);
}

/**
 * Returns the key name used to store the configuration setting.
 *
 * Based on the entity type and bundle, the keys used to store configuration
 * will have a common root name.
 *
 * @param string $entity_type
 *   The type of the entity the setting refers to.
 * @param string $bundle
 *   The bundle of the entity the setting refers to.
 * @param string $setting
 *   The name of the setting.
 *
 * @return string
 *   The key name of the configuration setting.
 *
 * @todo Generalize this logic so that it is available to any module needing
 *   per-bundle configuration.
 */
function content_translation_get_config_key($entity_type, $bundle, $setting) {
  $entity_type = preg_replace('/[^0-9a-zA-Z_]/', "_", $entity_type);
  $bundle = preg_replace('/[^0-9a-zA-Z_]/', "_", $bundle);
  return $entity_type . '.' . $bundle . '.content_translation.' . $setting;
}

/**
 * Retrieves the value for the specified setting.
 *
 * @param string $entity_type
 *   The type of the entity the setting refer to.
 * @param string $bundle
 *   The bundle of the entity the setting refer to.
 * @param string $setting
 *   The name of the setting.
 *
 * @returns mixed
 *   The stored value for the given setting.
 */
function content_translation_get_config($entity_type, $bundle, $setting) {
  $key = content_translation_get_config_key($entity_type, $bundle, $setting);
  return \Drupal::config('content_translation.settings')->get($key);
}

/**
 * Stores the given value for the specified setting.
 *
 * @param string $entity_type
 *   The type of the entity the setting refer to.
 * @param string $bundle
 *   The bundle of the entity the setting refer to.
 * @param string $setting
 *   The name of the setting.
 * @param $value
 *   The value to be stored for the given setting.
 */
function content_translation_set_config($entity_type, $bundle, $setting, $value) {
  $key = content_translation_get_config_key($entity_type, $bundle, $setting);
  return \Drupal::config('content_translation.settings')->set($key, $value)->save();
}

/**
 * Determines whether the given entity type is translatable.
 *
 * @param string $entity_type
 *   The type of the entity.
 * @param string $bundle
 *   (optional) The bundle of the entity. If no bundle is provided, all the
 *   available bundles are checked.
 *
 * @returns
 *   TRUE if the specified bundle is translatable. If no bundle is provided
 *   returns TRUE if at least one of the entity bundles is translatable.
 *
 * @todo Move to \Drupal\content_translation\ContentTranslationManager.
 */
function content_translation_enabled($entity_type, $bundle = NULL) {
  $enabled = FALSE;

  if (\Drupal::service('content_translation.manager')->isSupported($entity_type)) {
    $bundles = !empty($bundle) ? array($bundle) : array_keys(entity_get_bundles($entity_type));
    foreach ($bundles as $bundle) {
      if (content_translation_get_config($entity_type, $bundle, 'enabled')) {
        $enabled = TRUE;
        break;
      }
    }
  }

  return $enabled;
}

/**
 * Content translation controller factory.
 *
 * @param string $entity_type_id
 *   The type of the entity being translated.
 *
 * @return \Drupal\content_translation\ContentTranslationHandlerInterface
 *   An instance of the content translation controller interface.
 *
 * @todo Move to \Drupal\content_translation\ContentTranslationManager.
 */
function content_translation_controller($entity_type_id) {
  $entity_type = \Drupal::entityManager()->getDefinition($entity_type_id);
  // @todo Throw an exception if the key is missing.
  $class = $entity_type->getHandlerClass('translation');
  return new $class($entity_type);
}

/**
 * Checks whether a content translation is accessible.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to be accessed.
 * @param $op
 *   The operation to be performed on the translation. Possible values are:
 *   - "view"
 *   - "update"
 *   - "delete"
 *   - "create"
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 *   The access result.
 *
 * @todo Move to \Drupal\content_translation\ContentTranslationManager.
 */
function content_translation_access(EntityInterface $entity, $op) {
  return content_translation_controller($entity->getEntityTypeId())->getTranslationAccess($entity, $op) ;
}

/**
 * Implements hook_form_alter().
 */
function content_translation_form_alter(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if (!($form_object instanceof EntityFormInterface)) {
    return;
  }
  $entity = $form_object->getEntity();

  if ($entity instanceof ContentEntityInterface && $entity->isTranslatable() && count($entity->getTranslationLanguages()) > 1) {
    $controller = content_translation_controller($entity->getEntityTypeId());
    $controller->entityFormAlter($form, $form_state, $entity);

    // @todo Move the following lines to the code generating the property form
    //   elements once we have an official #multilingual FAPI key.
    $translations = $entity->getTranslationLanguages();
    $form_langcode = $form_object->getFormLangcode($form_state);

    // Handle fields shared between translations when there is at least one
    // translation available or a new one is being created.
    if (!$entity->isNew() && (!isset($translations[$form_langcode]) || count($translations) > 1)) {
      foreach ($entity->getFieldDefinitions() as $property_name => $definition) {
        if (isset($form[$property_name])) {
          $form[$property_name]['#multilingual'] = $definition->isTranslatable();
        }
      }
    }

  }
}

/**
 * Implements hook_language_fallback_candidates_OPERATION_alter().
 *
 * Performs language fallback for unaccessible translations.
 */
function content_translation_language_fallback_candidates_entity_view_alter(&$candidates, $context) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $context['data'];
  $entity_type_id = $entity->getEntityTypeId();
  $entity_type = $entity->getEntityType();
  $permission = $entity_type->getPermissionGranularity() == 'bundle' ? $permission = "translate {$entity->bundle()} $entity_type_id" : "translate $entity_type_id";
  $current_user = \Drupal::currentuser();
  if (!$current_user->hasPermission('translate any entity') && !$current_user->hasPermission($permission)) {
    foreach ($entity->getTranslationLanguages() as $langcode => $language) {
      if (empty($entity->translation[$langcode]['status'])) {
        unset($candidates[$langcode]);
      }
    }
  }
}

/**
 * Implements hook_entity_storage_load().
 */
function content_translation_entity_storage_load(array $entities, $entity_type) {
  $enabled_entities = array();

  if (content_translation_enabled($entity_type)) {
    foreach ($entities as $entity) {
      if ($entity instanceof ContentEntityInterface && $entity->isTranslatable()) {
        $enabled_entities[$entity->id()] = $entity;
      }
    }
  }

  if (!empty($enabled_entities)) {
    content_translation_load_translation_metadata($enabled_entities, $entity_type);
  }
}

/**
 * Loads translation data into the given entities.
 *
 * @param array $entities
 *   The entities keyed by entity ID.
 * @param string $entity_type
 *   The type of the entities.
 */
function content_translation_load_translation_metadata(array $entities, $entity_type) {
  $query = 'SELECT * FROM {content_translation} te WHERE te.entity_type = :entity_type AND te.entity_id IN (:entity_id)';
  $result = db_query($query, array(':entity_type' => $entity_type, ':entity_id' => array_keys($entities)));
  $exclude = array('entity_type', 'entity_id', 'langcode');
  foreach ($result as $record) {
    $entity = $entities[$record->entity_id];
    // @todo Declare these as entity (translation?) properties.
    foreach ($record as $field_name => $value) {
      if (!in_array($field_name, $exclude)) {
        $langcode = $record->langcode;
        $entity->translation[$langcode][$field_name] = $value;
        if (!$entity->hasTranslation($langcode)) {
          $entity->initTranslation($langcode);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function content_translation_entity_insert(EntityInterface $entity) {
  // Only do something if translation support for the given entity is enabled.
  if (!($entity instanceof ContentEntityInterface) || !$entity->isTranslatable()) {
    return;
  }

  $fields = array('entity_type', 'entity_id', 'langcode', 'source', 'outdated', 'uid', 'status', 'created', 'changed');
  $query = db_insert('content_translation')->fields($fields);

  foreach ($entity->getTranslationLanguages() as $langcode => $language) {
    $translation = isset($entity->translation[$langcode]) ? $entity->translation[$langcode] : array();

    $translation += array(
      'source' => '',
      'uid' => \Drupal::currentUser()->id(),
      'outdated' => FALSE,
      'status' => TRUE,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
    );

    $translation['entity_type'] = $entity->getEntityTypeId();
    $translation['entity_id'] = $entity->id();
    $translation['langcode'] = $langcode;

    // Reorder values to match the schema.
    $values = array();
    foreach ($fields as $field_name) {
      $value = is_bool($translation[$field_name]) ? intval($translation[$field_name]) : $translation[$field_name];
      $values[$field_name] = $value;
    }
    $query->values($values);
  }

  $query->execute();
}

/**
 * Implements hook_entity_delete().
 */
function content_translation_entity_delete(EntityInterface $entity) {
  // Only do something if translation support for the given entity is enabled.
  if (!($entity instanceof ContentEntityInterface) || !$entity->isTranslatable()) {
    return;
  }

  db_delete('content_translation')
    ->condition('entity_type', $entity->getEntityTypeId())
    ->condition('entity_id', $entity->id())
    ->execute();
}

/**
 * Implements hook_entity_update().
 */
function content_translation_entity_update(EntityInterface $entity) {
  // Only do something if translation support for the given entity is enabled.
  if (!($entity instanceof ContentEntityInterface) || !$entity->isTranslatable()) {
    return;
  }

  // Delete and create to ensure no stale value remains behind.
  content_translation_entity_delete($entity);
  content_translation_entity_insert($entity);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function content_translation_entity_extra_field_info() {
  $extra = array();

  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type => $info) {
    foreach (entity_get_bundles($entity_type) as $bundle => $bundle_info) {
      if (content_translation_enabled($entity_type, $bundle)) {
        $extra[$entity_type][$bundle]['form']['translation'] = array(
          'label' => t('Translation'),
          'description' => t('Translation settings'),
          'weight' => 10,
        );
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function content_translation_form_field_ui_field_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->get('field');
  $bundle_is_translatable = content_translation_enabled($field->entity_type, $field->bundle);

  $form['field']['translatable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Users may translate this field'),
    '#default_value' => $field->isTranslatable(),
    '#weight' => -1,
    '#disabled' => !$bundle_is_translatable,
    '#access' => $field->getFieldStorageDefinition()->isTranslatable(),
  );

  // Provide helpful pointers for administrators.
  if (\Drupal::currentUser()->hasPermission('administer content translation') &&  !$bundle_is_translatable) {
    $toggle_url = \Drupal::url('language.content_settings_page', array(), array(
      'query' => drupal_get_destination(),
    ));
    $form['field']['translatable']['#description'] = t('To configure translation for this field, <a href="@language-settings-url">enable language support</a> for this type.', array(
      '@language-settings-url' => $toggle_url,
    ));
  }

  if ($field->isTranslatable()) {
    module_load_include('inc', 'content_translation', 'content_translation.admin');
    $element = content_translation_field_sync_widget($field);
    if ($element) {
      $form['field']['third_party_settings']['content_translation']['translation_sync'] = $element;
      $form['field']['third_party_settings']['content_translation']['translation_sync']['#weight'] = -10;
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function content_translation_entity_presave(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface && $entity->isTranslatable()) {
    // @todo Avoid using request attributes once translation metadata become
    //   regular fields.
    $attributes = \Drupal::request()->attributes;
    \Drupal::service('content_translation.synchronizer')->synchronizeFields($entity, $entity->language()->id, $attributes->get('source_langcode'));
  }
}

/**
 * Implements hook_element_info_alter().
 */
function content_translation_element_info_alter(&$type) {
  if (isset($type['language_configuration'])) {
    $type['language_configuration']['#process'][] = 'content_translation_language_configuration_element_process';
  }
}

/**
 * Returns a widget to enable content translation per entity bundle.
 *
 * Backward compatibility layer to support entities not using the language
 * configuration form element.
 *
 * @todo Remove once all core entities have language configuration.
 *
 * @param string $entity_type
 *   The type of the entity being configured for translation.
 * @param string $bundle
 *   The bundle of the entity being configured for translation.
 * @param array $form
 *   The configuration form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function content_translation_enable_widget($entity_type, $bundle, array &$form, FormStateInterface $form_state) {
  $key = $form_state->get(['content_translation', 'key']);
  $context = $form_state->get(['language', $key]) ?: [];
  $context += ['entity_type' => $entity_type, 'bundle' => $bundle];
  $form_state->set(['language', $key], $context);
  $element = content_translation_language_configuration_element_process(array('#name' => $key), $form_state, $form);
  unset($element['content_translation']['#element_validate']);
  return $element;
}

/**
 * Process callback: Expands the language_configuration form element.
 *
 * @param array $element
 *   Form API element.
 *
 * @return
 *   Processed language configuration element.
 */
function content_translation_language_configuration_element_process(array $element, FormStateInterface $form_state, array &$form) {
  if (empty($element['#content_translation_skip_alter']) && \Drupal::currentUser()->hasPermission('administer content translation')) {
    $key = $element['#name'];
    $form_state->set(['content_translation', 'key'], $key);
    $context = $form_state->get(['language', $key]);

    $element['content_translation'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable translation'),
      // For new bundle, we don't know the bundle name yet,
      // default to no translatability.
      '#default_value' => $context['bundle'] ? content_translation_enabled($context['entity_type'], $context['bundle']) : FALSE,
      '#element_validate' => array('content_translation_language_configuration_element_validate'),
      '#prefix' => '<label>' . t('Translation') . '</label>',
    );

    $form['actions']['submit']['#submit'][] = 'content_translation_language_configuration_element_submit';
  }
  return $element;
}

/**
 * Form validation handler for element added with content_translation_language_configuration_element_process().
 *
 * Checks whether translation can be enabled: if language is set to one of the
 * special languages and language selector is not hidden, translation cannot be
 * enabled.
 *
 * @see content_translation_language_configuration_element_submit()
 */
function content_translation_language_configuration_element_validate($element, FormStateInterface $form_state, array $form) {
  $key = $form_state->get(['content_translation', 'key']);
  $values = $form_state->getValue($key);
  if (!$values['language_show'] && $values['content_translation'] && \Drupal::languageManager()->isLanguageLocked($values['langcode'])) {
    foreach (\Drupal::languageManager()->getLanguages(LanguageInterface::STATE_LOCKED) as $language) {
      $locked_languages[] = $language->name;
    }
    // @todo Set the correct form element name as soon as the element parents
    //   are correctly set. We should be using NestedArray::getValue() but for
    //   now we cannot.
    $form_state->setErrorByName('', t('"Show language selector" is not compatible with translating content that has default language: %choice. Either do not hide the language selector or pick a specific language.', array('%choice' => $locked_languages[$values['langcode']])));
  }
}

/**
 * Form submission handler for element added with content_translation_language_configuration_element_process().
 *
 * Stores the content translation settings.
 *
 * @see content_translation_language_configuration_element_validate()
 */
function content_translation_language_configuration_element_submit(array $form, FormStateInterface $form_state) {
  $key = $form_state->get(['content_translation', 'key']);
  $context = $form_state->get(['language', $key]);
  $enabled = $form_state->getValue(array($key, 'content_translation'));

  if (content_translation_enabled($context['entity_type'], $context['bundle']) != $enabled) {
    content_translation_set_config($context['entity_type'], $context['bundle'], 'enabled', $enabled);
    \Drupal::entityManager()->clearCachedDefinitions();
    \Drupal::service('router.builder')->setRebuildNeeded();
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for language_content_settings_form().
 */
function content_translation_form_language_content_settings_form_alter(array &$form, FormStateInterface $form_state) {
  module_load_include('inc', 'content_translation', 'content_translation.admin');
  _content_translation_form_language_content_settings_form_alter($form, $form_state);
}

/**
 * Implements hook_preprocess_HOOK() for theme_language_content_settings_table().
 */
function content_translation_preprocess_language_content_settings_table(&$variables) {
  module_load_include('inc', 'content_translation', 'content_translation.admin');
  _content_translation_preprocess_language_content_settings_table($variables);
}

/**
 * Implements hook_page_alter().
 */
function content_translation_page_alter(&$page) {
  $route_match = \Drupal::routeMatch();

  // If the current route has no parameters, return.
  if (!($route = $route_match->getRouteObject()) || !($parameters = $route->getOption('parameters'))) {
    return;
  }

  // Determine if the current route represents an entity.
  foreach ($parameters as $name => $options) {
    if (!isset($options['type']) || strpos($options['type'], 'entity:') !== 0) {
      continue;
    }

    $entity = $route_match->getParameter($name);
    if ($entity instanceof ContentEntityInterface) {
      // Current route represents a content entity. Build hreflang links.
      foreach ($entity->getTranslationLanguages() as $language) {
        $url = $entity->urlInfo()
          ->setOption('language', $language)
          ->setAbsolute()
          ->toString();
        $page['#attached']['drupal_add_html_head_link'][] = array(
          array(
            'rel' => 'alternate',
            'hreflang' => $language->id,
            'href' => $url,
          ),
          TRUE,
        );
      }
    }
    // Since entity was found, no need to iterate further.
    return;
  }
}
